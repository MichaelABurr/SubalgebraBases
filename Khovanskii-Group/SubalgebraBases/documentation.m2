-- undocumented methods and symbols (for each, consider... does it really need to be exported? should it be documented?)
undocumented {
    -- These are basically self-explanatory
    (net, PresRing),
    (net, Subring),
    -- These are only used as keys in the cache, which end users aren't intended to use.
    -- They should be replaced by strings in the future, but this isn't very important.
    SagbiGens,
    SagbiDone,
    SagbiDegrees,
    SubalgComputations,
    insertPending,
    }

doc ///
   Key
     SubalgebraBases 
   Headline
     a package for finding canonical subalgebra bases (aka Sagbi bases)
   Description
    Text
      Let $R=k[f_1,\ldots,f_k]$ denote the subalgebra of the polynomial ring $k[x_1,\ldots,x_n]$ generated by $f_1,\ldots ,f_k.$ We say
      $f_1,\ldots,f_k$ form a {\it subalgebra basis} with respect to a monomial order $<$ if the {\it initial algebra}
      associated to $<$, defined as $in(R) := k[in(f) \mid f \in R],$ is generated by the elements
      $in(f_1), \ldots , in(f_k).$ 
    Text
      {\bf Some references for Subalgebra bases (aka canonical subalgebra bases, SAGBI bases)}

      @UL {
      "Kapur, D., Madlener, K. (1989). A completion procedure for computing a canonical basis of a $k$-subalgebra.
      Proceedings of Computers and Mathematics 89 (eds. Kaltofen and Watt), MIT, Cambridge, June 1989",
      "Robbiano, L., Sweedler, M. (1990). Subalgebra bases,
      in W.~Bruns, A.~Simis (eds.): Commutative Algebra,
      Springer Lecture Notes in Mathematics 1430, pp.~61--87",
      "F. Ollivier, Canonical Bases: Relations with Standard bases, finiteness
      conditions and applications to tame automorphisms, in Effective Methods
      in Algebraic Geometry, Castiglioncello 1990, pp. 379-400,
      Progress in Math. 94 Birkhauser, Boston (1991)",
      "B. Sturmfels, Groebner bases and Convex Polytopes, Univ. Lecture
      Series 8, Amer Math Soc, Providence, 1996"
      }@
   SeeAlso
     "SAGBI bases of subrings of quotient rings"
     "Experimental implementation of modules over subrings"
      
      
///


doc ///
   Key
     subalgebraBasis
     (subalgebraBasis,Subring)
     (subalgebraBasis, Matrix)
     (subalgebraBasis, List)
   Headline
     Does the same thing as the function @TO "sagbi"@, except returns a matrix instead of a @TT "Subring"@ instance. 
   Description
     Text
       The command @TT "subalgebraBasis A"@ is equivalent to the command @TT "gens sagbi A"@.       
       
       This function is redundant given that the function @TO "sagbi"@ exists. However, it is required for legacy purposes. 
   SeeAlso
     sagbi
///

doc ///
   Key
     sagbi
     (sagbi,Subring)
     (sagbi, Matrix)
     (sagbi, List)
     [sagbi,Limit]
     [sagbi,PrintLevel]
     [sagbi,Strategy]
     [sagbi,Autosubduce]
     [subalgebraBasis,Limit]
     [subalgebraBasis,PrintLevel]
     [subalgebraBasis,Strategy]
     [subalgebraBasis,Autosubduce]
   Headline
     subalgebra basis (sagbi basis)
   Usage
     N = sagbi M
     N = sagbi A
     N = sagbi L
   Inputs
     A:Subring
     M:Matrix
       of generators for a subring of @ ofClass{PolynomialRing} @
     L:List
       containing generators for a subring of @ ofClass{PolynomialRing} @
     Limit=>ZZ
       a degree limit for the binomial S-pairs that are computed internally.
     PrintLevel=>ZZ
       When this is greater than zero, information is printed about the progress of the computation (See: @TO "PrintLevel"@)
     Strategy=>String
       not currently used
     Autosubduce=>Boolean
       Whether to perform autosubduction on the generators before performing the Sagbi basis computation (See: @TO "Autosubduce"@)
   Outputs
     N:Matrix
       whose entries form a partial subalgebra basis
   Description
    Text
        The output of this function is generally a partial subalgebra basis. This is unavoidable, since a subalgebra of a polynomial ring, endowed with some polynomial order, need not have a finite subalgebra basis. 
	
	Here is a quintessential example of this phenomenon:
    Example
      R=QQ[x,y];
      A = subring matrix{{x+y,x*y,x*y^2}};
      gens sagbi(A,Limit=>3)
      gens sagbi(A,Limit=>10)
    Text
        Nevertheless, a finite subalgebra basis exists for many notable examples. 
        The following computation verifies a special case of Theorem 3.3 in "SAGBI bases with applications to blow-up algebras" by Conca, Herzog, and Valla.
    Example
        R=QQ[t,z_1..z_4,MonomialOrder=>{Weights=>{1,0,0,0,0},Lex}];
        M=matrix{{z_1,z_2,z_3},{z_2,z_3,z_4}};
        I=minors(2,M);
        A=subring(drop(gens R,1) | apply(I_*, p -> t* p));
        gens sagbi(A)
    Text
        Continuing with this example, we illustrate how the setting the option Limit may influence the output:
    Example
        subR = sagbi(A, Limit=>1);
	peek subR
        subR = sagbi(A, Limit=>6);
	peek subR
    Text
        The output of the last command is a finite Sagbi basis, but the computation necessary to verify this fact required setting Limit to at least 6.
   Caveat
   SeeAlso
///

doc ///
   Key
     (symbol %, RingElement, Subring)
   Headline
     remainder modulo a subring
   Usage
     r = f % A
   Inputs
     f:RingElement
       an element of the ambient ring of $A$ (endowed with some monomial order.)
     A:Subring
   Outputs
     r:RingElement
       The normal form of f modulo $A$
   Description
     Text
       The result $r$ is zero if and only if $f$ belongs to $A$.
     Example
       R = QQ[x1, x2, x3];
       A = subring {x1+x2+x3, x1*x2+x1*x3+x2*x3, x1*x2*x3, (x1-x2)*(x1-x3)*(x2-x3)} --usual invariants of A_3
       f = x1 + x2 + 2*x3
       f % A
       g = x1^2*x2 + x2^2*x3 + x3^2*x1
       g % A
   SeeAlso
    Subring
    subring
///


doc ///
   Key
     Subring
   Headline
     The type of all subrings
   Description
     Text
       The function @TO "subring"@ serves as the constructor of the @TO "Subring"@ type. 
       
       Every subring instance is guarenteed to have the following keys:
       
       @UL {
	    {BOLD {"AmbientRing"}, ": The polynomial ring that contains the subring instance's generators."},
	    {BOLD {"Generators"}, ": A one-row matrix, the generators of the subring."},
	    {BOLD {"isPartialSagbi"}, ": A boolean, false by default. Only set to true in subring instances that are the result of a Sagbi computation that terminated before a Sagbi basis was found."},
	    {BOLD {"isSagbi"}, ": A boolean that is false by default. Only set to true in subring instances resulting from a Sagbi computation that terminated successfully. If this is true, the generators are a Sagbi basis."},
	    {BOLD {"partialDegree"}, ": A non-negative integer, 0 by default. In subrings that are the result of _any_ Sagbi computation (either successful or unsuccessful), this is set to the degree up to which all S-pairs had been processed before termination."},
	    {BOLD {"PresRing"}, ": An instance of the ", TO "PresRing", " type immutably associated with the subring's generators."},
	    {BOLD {"cache"}, ": Contains unspecified information. The contents of the cache may effect performance, but should never effect the result of a computation."}
	   }@
       
       The state of the cache should not effect the value of a computation as long as it has not been corrupted. For example, some functions assume that the cache contains specific keys and will throw
       errors if those keys are not present. 
           
   Caveat
   SeeAlso
       subring
       PresRing
       (gens, Subring)
       (ambient, Subring)
       sagbi
///


doc ///
   Key
     PresRing
   Headline
     Stores maps and other information associated with the lifted presentation ring (a.k.a. @TT "TensorRing"@) of a subring instance.
   Description
     Text
       This type is not intended to be used outside of the @TO "Subring"@ type. The primary reason why this is a separate type in the first place is to keep the @TO "Subring"@ type human-readable.
       Namely, the @TO "PresRing"@ type has an overloaded @TO "net"@ method that prevents @TT "(peek, Subring)"@ from flooding the screen. 
       
       The information that the @TO "PresRing"@ type contains about a @TO "Subring"@ instance is related to the @ITALIC "lifted presentation ring"@ of a subring. In the code, the
       lifted presentation of a subring is referred to as the @TT "TensorRing"@. 
       
       
       An instance of the  @TO "PresRing"@ type contains the following keys:
       
       @UL {
	    {BOLD {"TensorRing"}, ": The lifted presentation ring of the given subring."},
	    {BOLD {"ProjectionInclusion"}, ": A map from ", TT {"TensorRing"}, " to ", TT {"TensorRing"}},
	    {BOLD {"ProjectionBase"},  ": A map from ", TT {"TensorRing"}, " to the ambient ring."},
	    {BOLD {"InclusionBase"},  ": A map from the ambient ring to ", TT {"TensorRing"}},
	    {BOLD {"Substitution"}, ": A map from ", TT {"TensorRing"}, " to ", TT {"TensorRing"}},
	    {BOLD {"FullSub"}, ": Composition of ",TT {"Substitution"}, " and ", TT {"ProjectionBase."}},
	    {BOLD {"SyzygyIdeal"}, ": This is used in the function ", TO "sagbi", " to calculate toric syzygies."},
	    {BOLD {"LiftedPres"}, ": This is used in normal form calculations."}
	   }@
     Text 
       To understand the various maps stored inside of a @TO "PresRing"@ instance, it is informative to look at the output of @TO "debugPrintAllMaps"@:
     CannedExample
       i1 : gndR = QQ[x, y];

       i2 : subR = subring {y, y*x-x^2, y*x^2};

       i3 : debugPrintAllMaps subR
       - ProjectionInclusion:
       maps p_0 to 0
       maps p_1 to 0
       maps p_2 to p_2
       maps p_3 to p_3
       maps p_4 to p_4
       - ProjectionBase:
       maps p_0 to x
       maps p_1 to y
       maps p_2 to 0
       maps p_3 to 0
       maps p_4 to 0
       - InclusionBase:
       maps x to p_0
       maps y to p_1
       - Substitution:
       maps p_0 to p_0
       maps p_1 to p_1
       maps p_2 to p_1
       maps p_3 to -p_0^2+p_0*p_1
       maps p_4 to p_0^2*p_1
       - FullSub:
       maps p_0 to x
       maps p_1 to y
       maps p_2 to y
       maps p_3 to -x^2+x*y
       maps p_4 to x^2*y
   SeeAlso
       subring
       PresRing
       (gens, Subring)
       (ambient, Subring)
       sagbi
///

-*
doc ///
   Key
     subring
     (subring, List)
     (subring, Matrix)
     VarBaseName
     [subring, VarBaseName]
     [makePresRing, VarBaseName]
   Headline
     Constructs a subring of a polynomial ring.
   Usage
     A = subring M
   Inputs
     M:Matrix
       A one-row matrix whose entries are the generators of the resulting subring.
     L:List 
       A list whose entries are the generators of the resulting subring.
     VarBaseName=>String
       Determines the symbol used for the variables of the @TT "TensorRing"@ of the resulting @TO "Subring"@ instance.
   Outputs
     A:Subring
   Description
     Text
       This function serves as the canonical constructor for the @TO "Subring"@ type.

       Generators that are constants are ignored because all subrings are assumed to contain the field of coefficients. An error is 
       thrown if the given set of generators does not contain atleast one non-constant generator. 

       The generators of a subring need not be reduced. For example, subrings with pairs of duplicated generators are acceptable.
     Example
       gndR = QQ[x];
       A = sagbi subring {x^4+x^3, x^2+x}
       (x^3+x^2)%A

   SeeAlso
     Subring
///
*-

doc ///
   Key
     autoreduce
  --   (autoreduce, Subring, Matrix)
   Headline
     Perform autoreduction of the generators of an ideal of a subring.
   Usage
     result = internalSubduction(PresRing, idealGens)
   Inputs
     subR:Subring
       A subring instance that is a sagbi basis.
     idealGens:Matrix
       A one-row matrix whose entries are the elements of subR considered as generators of an ideal $I$. 
   Outputs
     result:Matrix
       The reduced generators of the ideal generated by the entries of M.
   Description
     Text
       Performs autoreduction on the generators of an ideal within a subring.
       
       Each generator $g\in M$ is replaced with the normal form of $g$ relative to $M\setminus \{g\}$, computed using
       the function @TO "intrinsicReduce"@.

   SeeAlso
        autosubduce
///

doc ///
   Key
     autosubduce
   --  (autosubduce, Matrix)
   Headline
     Performs autosubduction on the generators of a subring.
   Usage
     result = internalSubduction(pres)
   Inputs
     subR:Subring
    	A subring that need not be a sagbi basis. 
   Outputs
     result:Subring
       A subring generated by the autosubduced generators of subR.
   Description
     Text
       Replaces each generator $g$ of subR with the result of subducing $g$ modulo (gens subR)$\setminus \{g\}$.
       
   SeeAlso
     autoreduce
     (internalSubduction, PresRing, RingElement)
///


doc ///
   Key
     isSubalg
--     (isSubalg, Subring, Subring)
   Headline
     Calculates whether a given subring is contained in another subring.
   Usage
     result = intrinsicReduce(A, B)
   Inputs
     A:Subring
     B:Subring
   Outputs
     result:Boolean
    	Whether or not the subring A is contained in the subring B. 
   Description
     Text
       This function tests that each of the generators of the subring A have a normal form of zero with respect to B.
     Example
       R = QQ[t_1, t_2]
       A = subring matrix(R, {{t_1^2, t_1*t_2}});
       B = subring matrix(R, {{t_1^2, t_1*t_2, t_2^2}});
       isSubalg(A,B)
///

doc ///
   Key
     leadCoef
  --   (leadCoef, RingElement)
   Headline
     Returns the coefficient of the lead monomial of f.
   Usage
     result = leadCoef(f)
   Inputs
     f:RingElement
   Outputs
     result:Thing
    	The coefficient of the lead monomial of f.
   Description       
     Example
       R = QQ[t_1, t_2];
       f = 5*t_1^2 + 7*t_2^2;
       leadCoef(f)
///

doc ///
   Key
     makePresRing
     (makePresRing, Ring, Matrix)
     (makePresRing, Ring, List)
     (makePresRing, Subring)
   Headline
     Contstructs an instance of the PresRing type
   Usage
     result = makePresRing(gndR, gensMat)
     result = makePresRing(gndR, gensList)
   Inputs
     gndR:PolynomialRing
     	 The ambient ring. Contains the entries of gensMat (or gensList.)
     gensList:List
     	 A list of subring generators.
     gensMat:Matrix
     	 A one-row matrix of generators.
   Outputs
     result:PresRing
    	An instance of PresRing
   Description
     Text 
       There are very few situations where it is recommended to use this function directly. As a rule of thumb, do not use
       this function if it is possible to use the function @TT "subring"@ instead.
       
       The reason why this is exported is for extensibility purposes. Having access to @TT "makePresRing"@ makes it easier
       to implement functions that have complete control over the data within a @TT "Subring"@ instance. 
       
       For example, this function is used in the implementation of @TO "sagbi"@ because there it is neccessary to create an
       instance of the @TO "Subring"@ type with a very specific state. 
///


doc ///
   Key
     mingensSubring
  --   (mingensSubring, Subring, Matrix)
   Headline
     Given a matrix that is considered as a module over a subring, this performs autoreduction on its generators.
   Usage
     result = mingensSubring(subR, M)
   Inputs
     subR:Subring
     M:Matrix
   Outputs
     result:Thing
    	The autoreduced generators of the given module.
   Description
     Text 
       This function converts the matrix M to a subring ideal, performs autoreduction on the generating set of that ideal, 
       and then returns the result in the form of a matrix.
///

doc ///
   Key
     moduleToSubringIdeal
    -- (moduleToSubringIdeal, Subring, Matrix)
   Headline
     Convert a module stored as a matrix to a subring ideal.
   Usage
     result = mingensSubring(subR, M)
   Inputs
     subR:Subring
     	 A subring that is a sagbi basis.
     M:Matrix
     	 A matrix whose entries are containing are elements of subR. 
   Outputs
     moduleSubR:Subring
        A subring 
     result2:Matrix
     	A one-column matrix whose entries are the generators of the subring ideal.
     gVars:Matrix
     	A one-row matrix whose entries are the generators of the module.
   Description
     Text 
       This function is highly experimental.
   SeeAlso
     "Experimental implementation of modules over subrings"
///

doc ///
   Key
     subalgEquals
  --   (symbol ==, Subring, Subring)
  --   (subalgEquals, Subring, Subring)
   Headline
     Check if two subring instances are mathematically equal.
   Usage
     result = subalgEquals(A,B)
     A == B
   Inputs
     A:Subring
     B:Subring
   Outputs
     result:Boolean
   Description
     Text 
       Tests subrings for mathematical equality.
       
       The ambient rings of the subrings @TT "A"@ and @TT "B"@ should be the same.
   SeeAlso
     isSubalg 
///

doc ///
   Key
     Autosubduce
   Headline
     Whether to autosubduce before performing the Sagbi algorithm
   Description
     Text 
       By default, the function @TO "sagbi"@ performs autosubduction on the generators of the given subring. Strictly speaking,
       this step is required in order to guarentee the correctness of the result in all cases. However, when the set of generators
       passed to @TO "sagbi"@ is large but it is expected that the subring they generate is not trivial, this option can be set to 
       @TT "false"@ in order to gain a performance advantage.     
   SeeAlso
     sagbi
     Strategy
     Autosubduce
     Limit
     PrintLevel 
///

doc ///
   Key
     PrintLevel
   Headline
     A verbose mode for the Sagbi algorithm.
   Description
     Text 
       There are currently three different levels supported for this option:
       
       @UL{
	   "0: default, print nothing.",
	   "1: Print information about the progress of the computation, but do not print any polynomials.",
	   "2: Print all information about the progress of the computaiton, including polynomials."
	   }@
   SeeAlso
     sagbi
     Strategy
     Autosubduce
     Limit
     PrintLevel 
///


doc ///
   Key
     monoCoef
 --    (monoCoef, RingElement, RingElement)
   Headline
     For polynomial @TT "p"@ and monomial @TT "m"@, extract the (possibly non-constant) "coefficient" of @TT "m"@ in @TT "p"@.
   Inputs
     m:RingElement
       A monomial. 
     p:RingElement
       A polynomial from the same ring as m.
   Outputs
     coef:RingElement
       This function finds a polynomial @TT "coef"@ such that @TT "p == coef*m + [something]"@ where coef is "maximal."
   Usage 
     coef = monoCoef(m, p) 
   Description
     Text 
       The "coefficient" of the monomial @TT "m"@ may involve @TT "m"@ itself. 
       
       If m has an (actual) coefficient equal to something other than one, it is ignored
      
     Example
       gndR = QQ[x,y,z];
       p = x*y*z + z*y^2 + 2*x^2*y^2*z^2;
       m = x*y;
       monoCoef(m, p)
///

doc ///
   Key
     toMonomial
   Headline
     Converts an exponent vector @TT "L"@ to a monomial in @TT "vars R"@.
   Inputs
     R:PolynomialRing
       A polynomial ring.
     L:List
       An exponent vector with one entry per variable in @TT "vars R"@.
   Outputs
     mono:RingElement
       A monomial whose exponent vector is @TT "L"@.
   Usage 
     mono = toMonomial(R, L)
   Description
     Example
       gndR = QQ[x,y,z];
       toMonomial(gndR, {5,2,1})
///



doc ///
   Key
     toricSyz
  --   (toricSyz, Subring, Matrix)
   Headline
     Calculate toric (monomial) syzygies of a set of monomials in the initial algebra.
   Inputs
     subR:Subring
     M:Matrix
     	 A one-row matrix of monomials elements in the initial algebra of subR.
   Outputs
     result:Matrix
   Usage 
     result = toricSyz(subR, M)
   Description
     Text      
       This is an implementation of algorithm 11.18 of the following text:
       
       B. Sturmfels, Groebner bases and Convex Polytopes, Univ. Lecture Series 8, Amer Math Soc, Providence, 1996
      
       See @TO "Experimental implementation of modules over subrings"@ for an example application of this function.
///

doc ///
   Key
     intrinsicReduce
  --   (intrinsicReduce, Subring, Matrix, RingElement)
  --   (intrinsicReduce, Subring, Matrix, Matrix)

   Headline
     Compute normal forms relative to an ideal within a subring that has a known Sagbi basis.
   Inputs
     subR:Subring
         A subring that is a Sagbi basis and contains the ideal generated by the 1-row matrix G.
     G:Matrix
     	 A one-row matrix that generates an ideal of subR.
     p:RingElement
     	 An element of the tensor ring of subR.
     M:Matrix
     	 A one-row matrix containing elements of the tensor ring of subR.
   Outputs
     result:RingElement
     resultMat:Matrix
   Usage 
     result = toricSyz(subR, M, p)
     resultMat = toricSyz(subR, G, M)
   Description
     Text
       This is an implementation of algorithm 11.14 of the following text:
       
       B. Sturmfels, Groebner bases and Convex Polytopes, Univ. Lecture Series 8, Amer Math Soc, Providence, 1996

       This is not fully tested and should be considered "experimental" or "educational."

   SeeAlso
     extrinsicBuchberger
///
-*
doc ///
   Key
     (symbol ^, Subring, ZZ)
   Headline
     Construct a subring that can be thought of as a free module over another subring.
   Inputs
     subR:Subring
         The subring to construct a free module over.
     n:ZZ
     	 The number of free generators.
   Outputs
     result:Subring
   Usage 
     result = subR^n
   Description
     Text
       The resulting subring has  @TT "n"@ distinguished "upper variables" that correspond to free module generators 
       
       This function is provided as an example of what a free module would be in this package's experimental system
       for handling modules. 
       
   SeeAlso
     "Experimental implementation of modules over subrings"
///
*-



doc ///
   Key
     (ambient, Subring)
   Headline
     Returns the ambient ring (ring containing the generators) of a subring.
   Inputs
     subR:Subring
       Any @TO "Subring"@ instance. 
   Outputs
     amb:PolynomialRing
       The ambient ring.
   Usage 
     amb = ambient subR 
   Description
     Example
       gndR = QQ[x,y,z];
       subR = subring({x^2, y^2, z^2});
       ambient subR
   SeeAlso
     (ring, Subring)
     (gens, Subring)
///

doc ///
   Key
     (gens, Subring)
   Headline
     Returns the generators of a subring as a one-row matrix.
   Inputs
     subR:Subring
       Any Subring instance. 
   Outputs
     M:Matrix
       A one-row matrix containing the generators of subR.
   Usage 
     M = gens subR
   Description
     Example
       gndR = QQ[x,y,z];
       subR = subring({x^2, y^2, z^2});
       gens subR
   SeeAlso
     (ambient, Subring)
     (ring, Subring)
///
doc ///
   Key
     (numgens, Subring)
   Headline
     Returns the number of generators of a subring.
   Inputs
     subR:Subring
       Any Subring instance. 
   Outputs
     n:ZZ
       The number of generators of subR.
   Usage 
     n = numgens subR
   Description
     Example
       gndR = QQ[x,y,z];
       subR = subring({x^2, y^2, z^2});
       numgens subR
   SeeAlso
     (gens, Subring)
     (ambient, Subring)
     (ring, Subring)
///


-*
-- FIX ME
doc ///
   Key
     (symbol //, RingElement, Subring)
     (symbol //, Matrix, Subring)
   Headline
     Attempt to write a ring element in terms of the generators of a subring.
   Usage 
     result = f//subR
   Inputs
     f:RingElement
       An element 
     subR:Subring
       A subring that is a Sagbi basis. 
   Outputs
     result:RingElement
   Description
     Text 
       Internally, this function calculates a Groebner basis. The first call will take longer to perform than subsequence calls
       because this Groebner basis is stored in the cache of @TT "subR"@ after it is found. Another implication of this is that
       it may take a very long time to compute for difficult subrings.   
       
       Doubts have been expressed about the theoretical basis of this function. Use as directed and wear protective goggles. 
     Example
       gndR = QQ[x];
       A = sagbi subring {x^4+x^3, x^2+x}
       gens A
       f = x^3 + x^2
       g = f//A
       (A#"PresRing"#"FullSub")(g) == f
///
*-
