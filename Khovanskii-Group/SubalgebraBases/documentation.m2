-- undocumented methods and symbols (for each, consider... does it really need to be exported? should it be documented?)
undocumented {
    -- These are basically self-explanatory
    (net, PresRing),
    (net, Subring),
    (net, SAGBIBasis),
    -- These are only used as keys in the cache, which end users aren't intended to use.
    -- They should be replaced by strings in the future, but this isn't very important.
    SagbiGens,
    SagbiDone,
    SagbiDegrees,
    SubalgComputations,
    insertPending,
    VarBaseName,
    storePending,
    -- the next three are utility functions (refactor later)
    toMonomial,
    monoCoef,
    leadCoef
    }

doc ///
  Key
    SubalgebraBases 
  Headline
    a package for finding canonical subalgebra bases (aka Sagbi bases)
  Description
    Text
      Let $R=k[f_1,\ldots,f_k]$ denote the subalgebra of the polynomial ring $k[x_1,\ldots,x_n]$ generated by $f_1,\ldots ,f_k.$ We say
      $f_1,\ldots,f_k$ form a {\it subalgebra basis} with respect to a monomial order $<$ if the {\it initial algebra}
      associated to $<$, defined as $in(R) := k[in(f) \mid f \in R],$ is generated by the elements
      $in(f_1), \ldots , in(f_k).$ 
      The main functions provided by this package are for computing these subalgebra bases: @TO sagbi @, @TO subalgebraBasis@, and @TO subduction @.
      Some useful functions for internal use and experimental features are also provided.
      Text
       {\bf Some references for Subalgebra bases (aka canonical subalgebra bases, SAGBI bases)}

      @UL {
      "Kapur, D., Madlener, K. (1989). A completion procedure for computing a canonical basis of a $k$-subalgebra.
      Proceedings of Computers and Mathematics 89 (eds. Kaltofen and Watt), MIT, Cambridge, June 1989",
      "Robbiano, L., Sweedler, M. (1990). Subalgebra bases,
      in W.~Bruns, A.~Simis (eds.): Commutative Algebra,
      Springer Lecture Notes in Mathematics 1430, pp.~61--87",
      "F. Ollivier, Canonical Bases: Relations with Standard bases, finiteness
      conditions and applications to tame automorphisms, in Effective Methods
      in Algebraic Geometry, Castiglioncello 1990, pp. 379-400,
      Progress in Math. 94 Birkhauser, Boston (1991)",
      "B. Sturmfels, Groebner bases and Convex Polytopes, Univ. Lecture
      Series 8, Amer Math Soc, Providence, 1996"
      }@
  SeeAlso
    "Experimental feature: SAGBI bases of subrings of quotient rings"
    "Experimental feature: modules over subrings"
///

doc ///
   Key
     subalgebraBasis
     (subalgebraBasis,Subring)
     (subalgebraBasis, Matrix)
     (subalgebraBasis, List)
    [subalgebraBasis,Limit]
    [subalgebraBasis,PrintLevel]
    [subalgebraBasis,Autosubduce]
   Headline
     subalgebra basis (sagbi basis) generators
   Usage
     N = subalgebraBasis M
     N = subalgebraBasis A
     N = subalgebraBasis L
     N = subalgebraBasis B
   Inputs
     A:Subring
     M:Matrix
       of generators for a subring of @ ofClass{PolynomialRing} @
     L:List
       containing generators for a subring of @ ofClass{PolynomialRing} @
     B:SAGBIBasis
        containing a partial computation of a sagbi basis
     Limit=>ZZ
       a degree limit for the binomial S-pairs that are computed internally.
     PrintLevel=>ZZ
       When this is greater than zero, information is printed about the progress of the computation (See: @TO "PrintLevel"@)
     Autosubduce=>Boolean
       Whether to perform autosubduction on the generators before performing the Sagbi basis computation (See: @TO "Autosubduce"@)
   Outputs
     N:Matrix
       whose entries form a partial subalgebra basis
   Description
     Text
       The command @TT "subalgebraBasis A"@ is equivalent to the command @TT "gens sagbi A"@.
   SeeAlso
     sagbi
///

doc ///
   Key
     sagbi
     (sagbi,Subring)
     (sagbi, Matrix)
     (sagbi, List)
     (sagbi,SAGBIBasis)
     [sagbi,Limit]
     [sagbi,PrintLevel]
     [sagbi,Autosubduce]
     [sagbi,storePending]
   Headline
     subalgebra basis (sagbi basis)
   Usage
     N = sagbi M
     N = sagbi A
     N = sagbi L
     N = sagbi B
   Inputs
     A:Subring
     M:Matrix
       of generators for a subring of @ ofClass{PolynomialRing} @
     L:List
       containing generators for a subring of @ ofClass{PolynomialRing} @
     B:SAGBIBasis
        containing a partial computation of a sagbi basis
     Limit=>ZZ
       a degree limit for the binomial S-pairs that are computed internally.
     PrintLevel=>ZZ
       When this is greater than zero, information is printed about the progress of the computation (See: @TO "PrintLevel"@)
     Autosubduce=>Boolean
       Whether to perform autosubduction on the generators before performing the Sagbi basis computation (See: @TO "Autosubduce"@)
     storePending=>Boolean
   Outputs
     N:SAGBIBasis
       a computation object holding the state of the sagbi basis computation
   Description
    Text
        The output of this function is a partial subalgebra basis. This is unavoidable, since a subalgebra of a polynomial ring, endowed with some polynomial order, need not have a finite subalgebra basis.
	
	Here is a quintessential example of this phenomenon:
    Example
      R=QQ[x,y];
      A = subring matrix{{x+y,x*y,x*y^2}};
      gens sagbi(A,Limit=>3)
      gens sagbi(A,Limit=>10)
    Text
        Nevertheless, a finite subalgebra basis can be computed in many special cases.
    Example
    	R = QQ[t_(1,1)..t_(3,3),MonomialOrder=>Lex];
	M = genericMatrix(R,3,3);
    	A = subring gens minors(2, M);	
	isSagbi A
	S = sagbi A;
    	gS = gens S
	isSagbi gS
   Caveat
   SeeAlso
        subalgebraBasis
///



doc /// 
    Key
        "Experimental feature: SAGBI bases of subrings of quotient rings"
    Description
        Text
          The SAGBI algorithm implementation used in this package was originally written by Mike Stillman in approximately 1999
	  for the purpose of implementing concepts from the paper "Using SAGBI bases to compute invariants" by Stillman and Tsai.
	  Namely, the purpose was to be capable of calculating Sagbi bases of subrings contained in quotient rings. 
	  The code still retains this capability, but there are
	  some pecularities. Consider the following example: 
	  
	Example
	  gndR = QQ[x,y, MonomialOrder => Lex];
	  I = ideal(x^2 - x*y);
	  Q = gndR/I;
	  subR = sagbi subring {x};
	  gens subR
	  
	Text 
	
	  Because $x^2 = xy$ inside of the quotient ring $\mathbb{Q}[x,y]/(x)$, the resulting Sagbi basis $(x)$ cannot be correct because
	  it does not involve $y$.
	
	  In this example, the algorithm terminated successfully because it has no way of knowing that $x^2 = xy$ inside of the
	  ambient ring of subR. Technically, one could argue that this isn’t a bug because it’s actually doing what it is
	  supposed to do according to the specification. Notice that the Sagbi algorithm’s proof of correctness in Proposition 3
	  of "Using SAGBI bases to compute invariants" by Stillman and Tsai does not apply when a finite Sagbi basis doesn’t exist. 
	  So, fixing this “bug” is really a question of whether or not it is possible to improve upon the underlying algorithm.
	  
	  What this means is that it is possible for the Sagbi algorithm to falsely succeed when the ambient ring is a quotient ring. 
	  However, when a finite SAGBI basis does happen to exist, the algorithm *should* be able to calculate it correctly given enough
	  time.
	  
	  The following is an example of a correct Sagbi computation over a subring of a quotient ring. It is an implementation of
	  Example 2 of Stillman and Tsai in the case $N=4$. 
	CannedExample
	  N = 4;
	  gndR = QQ[(a,b,c,d)|(u_1..u_N)|(v_1..v_N), MonomialOrder => Lex];
	  I = ideal(a*b - b*c - 1);
	  quot = gndR/I;
	  U = (vars quot)_{4..(N+3)}
	  V = (vars quot)_{(N+4)..(2*N+3)}
	  G = flatten for i from 0 to N-1 list(
    	      {a*(U_(0,i)) + b*(V_(0,i)), c*(U_(0,i)) + d*(V_(0,i))}
    	      );
	  sag = sagbi G
	  ans = matrix {{c*u_4+d*v_4, c*u_3+d*v_3, c*u_2+d*v_2, c*u_1+d*v_1, a*u_4+b*v_4, a*u_3+b*v_3, a*u_2+b*v_2,
     		  a*u_1+b*v_1, a*d*u_3*v_4-a*d*u_4*v_3-b*c*u_3*v_4+b*c*u_4*v_3,
     		  a*d*u_2*v_4-a*d*u_4*v_2-b*c*u_2*v_4+b*c*u_4*v_2, a*d*u_2*v_3-a*d*u_3*v_2-b*c*u_2*v_3+b*c*u_3*v_2,
     		  a*d*u_1*v_4-a*d*u_4*v_1-b*c*u_1*v_4+b*c*u_4*v_1, a*d*u_1*v_3-a*d*u_3*v_1-b*c*u_1*v_3+b*c*u_3*v_1,
     		  a*d*u_1*v_2-a*d*u_2*v_1-b*c*u_1*v_2+b*c*u_2*v_1}}
	  assert (gens sag == ans);
    SeeAlso
    	
///
doc /// 
    Key
        "Experimental feature: modules over subrings"
    Description
        Text
            We illustrate modules over subrings are implemented through an example.
	        The following is Example 11.19 from "Groebner bases and Convex Polytopes" by Bernd Sturmfels:
        CannedExample
	  i = 2;
	  gndR = QQ[t_1, t_2, t_3];
	  A := {t_1*t_2*t_3,
		t_1^2*t_2,
		t_1*t_2^2,
		t_1^2*t_3,
		t_1*t_3^2,
		t_2^2*t_3,
		t_2*t_3^2};
	  G := matrix {{t_1^4*t_2^4*t_3^4, t_1^8*t_2*t_3^6}}
	  subR = subring sagbi subring A;
	  assert((set first entries gens subR) === (set A)); 
	  tsyz := toricSyz(subR, G);
	  assert(tsyz * (transpose G) == 0);
	  ans1 = mingensSubring(subR, tsyz);  
	Text
	  The resulting value of @TT "ans1"@ and its normal form are:
	CannedExample
	  i13 : ans1

	  o13 = | t_1^4t_3^5    -t_2^3t_3^3    |
		| t_1^4t_2t_3^4 -t_2^4t_3^2    |
		| t_1^5t_3^4    -t_1t_2^3t_3^2 |
		| t_1^5t_2t_3^3 -t_1t_2^4t_3   |
		| t_1^6t_3^3    -t_1^2t_2^3t_3 |
		| t_1^6t_2t_3^2 -t_1^2t_2^4    |
		| t_1^4t_3^8    -t_2^3t_3^6    |

			7       2
	  o13 : Matrix R  <--- R
	  
	  i14 : ans1//subR

	  o14 = | p_4^2p_7  -p_3p_5 |
	       | p_4^2p_9  -p_5^2  |
	       | p_4p_7^2  -p_3p_8 |
	       | p_4p_7p_9 -p_5p_8 |
	       | p_7^3     -p_5p_9 |
	       | p_7^2p_9  -p_8^2  |
	       | p_4^4     -p_3^3  |

				  7                  2
	  o14 : Matrix (QQ[p ..p ])  <--- (QQ[p ..p ])
			   0   9              0   9
    	Text
	  --This appears to agree with Sturmfels's prediction, although it is not possible to be entirely certain that this computation
	  --is correct without knowing more than the information contained in the Sturmfels text. This is because Sturmfels does not
	  --fully specify what the set of minimal generators of this syzygy module are. Namely, it is only stated that it must include
	  --$2i+2=6$ syzygies of total degree $i+1 = 3$.
	
	  The following code illustrates the function @TO "mingensSubring"@:
	  
	CannedExample	
	  -- Performs autoreduction on M treated as a module over subR.
	  mingensSubring = method(TypicalValue => Matrix)
	  mingensSubring(Subring, Matrix) := (subR, M) -> (  
	      (A, B, gVars)  := moduleToSubringIdeal(subR, M);
	      final := autoreduce(A, transpose B);
	      -- Sort the rows of the matrix for more predictable behavior.
	      final = matrix transpose {sort first entries transpose final};
	      final = extractEntries(final, gVars);
    	      subR#"presentation"#"fullSubstitution"(sub(final,subR#"presentation"#"tensorRing"))
	      );
	Text
	   The function @TO "mingensSubring"@ works by converting the given matrix (which should be thought of as a module) to an
	   ideal inside of a subring, and then performing autoreduction on the generators of that ideal. It relies on the function
	   @TO "moduleToSubringIdeal"@ to construct a suitable subring and provide the generators that define this ideal.
	   Consider the output of the following command:
	CannedExample
	  i5 : debugPrintMap (subR#"presentation"#"fullSubstitution")
	  maps p_0 to t_1
	  maps p_1 to t_2
	  maps p_2 to t_3
	  maps p_3 to t_2*t_3^2
	  maps p_4 to t_1*t_3^2
	  maps p_5 to t_2^2*t_3
	  maps p_6 to t_1*t_2*t_3
	  maps p_7 to t_1^2*t_3
	  maps p_8 to t_1*t_2^2
	  maps p_9 to t_1^2*t_2
        Text
	  
	        @TT "p_1"@, ..., @TT "p_9"@ are the variables of what is refered to in the code as the @TT "tensorRing"@,
            which has two types of variables: The variables corresponding to the variables in the @TO "ambient"@ ring and the variables corresponding to the generators of the @TO "Subring"@
	  
	        The following command converts the toric syzygy module from our example (which is returned by @TT "toricSyz"@ in the form of a matrix) to an ideal
	        within a subring. This is identical to the @TT "moduleToSubring(subR, tsyz)"@ call that occurs in the first line of @TT "mingensSubring"@.
	CannedExample
	   i15 : (modRing, idealGens, gVars) = moduleToSubringIdeal(subR, tsyz)

	   o15 = (subring of QQ[p_0..p_11], | -p_0^6p_2^3p_10+p_0^2p_1^3p_2p_11   |, | p_10 p_11 |)
					    | -p_0^6p_1p_2^2p_10+p_0^2p_1^4p_11   |
					    | -p_0^6p_2^3p_10+p_0^2p_1^3p_2p_11   |
					    | -p_0^5p_1p_2^3p_10+p_0p_1^4p_2p_11  |
					    | -p_0^5p_2^4p_10+p_0p_1^3p_2^2p_11   |
					    | -p_0^5p_2^4p_10+p_0p_1^3p_2^2p_11   |
					    | -p_0^4p_1p_2^4p_10+p_1^4p_2^2p_11   |
					    | -p_0^4p_2^5p_10+p_1^3p_2^3p_11      |
					    | p_0^8p_2^4p_10-p_0^4p_1^3p_2^2p_11  |
					    | -p_0^7p_2^5p_10+p_0^3p_1^3p_2^3p_11 |
					    | -p_0^5p_2^7p_10+p_0p_1^3p_2^5p_11   |
					    | -p_0^4p_2^8p_10+p_1^3p_2^6p_11      |
					    | -p_0^6p_2^6p_10+p_0^2p_1^3p_2^4p_11 |
					    
	   i16 : debugPrintMap(modRing#"presentation"#"fullSubstition")
	   maps p_0 to p_0
	   maps p_1 to p_1
	   maps p_2 to p_2
	   maps p_3 to p_3
	   maps p_4 to p_4
	   maps p_5 to p_5
	   maps p_6 to p_6
	   maps p_7 to p_7
	   maps p_8 to p_8
	   maps p_9 to p_9
	   maps p_10 to p_10
	   maps p_11 to p_11
	   maps p_12 to p_10
	   maps p_13 to p_11
	   maps p_14 to p_1*p_2^2
	   maps p_15 to p_0*p_2^2
	   maps p_16 to p_1^2*p_2
	   maps p_17 to p_0*p_1*p_2
	   maps p_18 to p_0^2*p_2
	   maps p_19 to p_0*p_1^2
	   maps p_20 to p_0^2*p_1
    	Text
	  The ambient ring of @TT "modRing"@ is the tensor ring of @TT "subR"@, except two new variables @TT "p_10"@ and @TT "p_11"@ have been added.
	  The variables @TT "p_10"@ and @TT "p_11"@ correspond to the generators of the module. The generators @TT "p_12"@ and @TT "p_13"@ also correspond
	  to the generators of the module, except they are @ITALIC "upper"@ rather than @ITALIC "lower"@ variables.
	  
	  The primary reason why this implementation should be considered experimental is that the monomial order of a module is not fully specified. 
	  
	  When a @TO "Subring"@ instance is created using the function @TO "subring"@, the monomial order of the lower variables is the same as the monomial
	  order of their corresponding variables in the ambient ring while the monomial order of the upper variables is assigned arbitrarily. This monomial 
	  order is fine for the purposes of basic subring computations that this package's code was originally designed to perform. The problem with this system is 
	  that it is likely to cause bugs in the case where a subring's ambient ring is the tensor ring of another subring. 
	  
	  	 
    SeeAlso
      (moduleToSubringIdeal, Subring, Matrix)
      (mingensSubring, Subring, Matrix)
      (symbol ^, Subring, ZZ)
///


doc ///
   Key
     (symbol %, RingElement, Subring)
   Headline
     remainder modulo a subring
   Usage
     r = f % A
   Inputs
     f:RingElement
       an element of the ambient ring of $A$ (endowed with some monomial order.)
     A:Subring
   Outputs
     r:RingElement
       The normal form of f modulo $A$
   Description
     Text
       The result $r$ is zero if and only if $f$ belongs to $A$.
     Example
       R = QQ[x1, x2, x3];
       A = subring {x1+x2+x3, x1*x2+x1*x3+x2*x3, x1*x2*x3, (x1-x2)*(x1-x3)*(x2-x3)} --usual invariants of A_3
       f = x1 + x2 + 2*x3
       f % A
       g = x1^2*x2 + x2^2*x3 + x3^2*x1
       g % A
   SeeAlso
    Subring
    subring
///


doc ///
   Key
     Subring
   Headline
     The type of all subrings
   Description
     Text
       The function @TO "subring"@ serves as the constructor of the @TO "Subring"@ type. 
       
       Every subring instance is guarenteed to have the following keys:
       
       @UL {
	    {BOLD {"ambientRing"}, ": The polynomial ring that contains the subring instance's generators."},
	    {BOLD {"generators"}, ": A one-row matrix, the generators of the subring."},
	    {BOLD {"isSAGBI"}, ": A boolean that is false by default. Only set to true in subring instances resulting from a Sagbi computation that terminated successfully. If this is true, the generators are a Sagbi basis."},
	    {BOLD {"presentation"}, ": An instance of the ", TO "PresRing", " type immutably associated with the subring's generators."},
	    {BOLD {"cache"}, ": Contains unspecified information. The contents of the cache may effect performance, but should never effect the result of a computation."}
	   }@
       
       The state of the cache should not effect the value of a computation as long as it has not been corrupted. For example, some functions assume that the cache contains specific keys and will throw
       errors if those keys are not present. 
           
   Caveat
   SeeAlso
       subring
       PresRing
       (gens, Subring)
       (ambient, Subring)
       sagbi
///

doc ///
   Key
     SAGBIBasis
   Headline
     The type of all sagbi bases
   Description
     Text
        This is a computation object for sagbi bases.  It stores a partial sagbi computation for picking up a computation where it left off.
   SeeAlso
///

doc ///
   Key
     PresRing
   Headline
     Stores maps and other information associated with the lifted presentation ring (a.k.a. "tensorRing") of a subring instance.
   Description
     Text
       This type is not intended to be used outside of the @TO "Subring"@ type. The primary reason why this is a separate type in the first place is to keep the @TO "Subring"@ type human-readable.
       Namely, the @TO "PresRing"@ type has an overloaded @TO "net"@ method that prevents @TT "(peek, Subring)"@ from flooding the screen. 
       
       The information that the @TO "PresRing"@ type contains about a @TO "Subring"@ instance is related to the @ITALIC "lifted presentation ring"@ of a subring. In the code, the
       lifted presentation of a subring is referred to as the @TT "tensorRing"@. 
       
       
       An instance of the  @TO "PresRing"@ type contains the following keys:
       
       @UL {
	    {BOLD {"tensorRing"}, ": The lifted presentation ring of the given subring."},
	    {BOLD {"sagbiInclusion"}, ": A map from ", TT {"tensorRing"}, " to ", TT {"tensorRing"}},
	    {BOLD {"projectionAmbient"},  ": A map from ", TT {"tensorRing"}, " to the ambient ring."},
	    {BOLD {"inclusionAmbient"},  ": A map from the ambient ring to ", TT {"tensorRing"}},
	    {BOLD {"substitution"}, ": A map from ", TT {"tensorRing"}, " to ", TT {"tensorRing"}},
	    {BOLD {"fullSubstitution"}, ": Composition of ",TT {"substitution"}, " and ", TT {"projectionAmbient."}},
	    {BOLD {"syzygyIdeal"}, ": This is used in the function ", TO "sagbi", " to calculate toric syzygies."},
	    {BOLD {"liftedPres"}, ": This is used in normal form calculations."}
	   }@
     Text 
       To understand the various maps stored inside of a @TO "PresRing"@ instance, it is informative to look at the output of @TO "debugPrintAllMaps"@:
     CannedExample
       i1 : gndR = QQ[x, y];

       i2 : subR = subring {y, y*x-x^2, y*x^2};

       i3 : debugPrintAllMaps subR
       - sagbiInclusion:
       maps p_0 to 0
       maps p_1 to 0
       maps p_2 to p_2
       maps p_3 to p_3
       maps p_4 to p_4
       - projectionAmbient:
       maps p_0 to x
       maps p_1 to y
       maps p_2 to 0
       maps p_3 to 0
       maps p_4 to 0
       - inclusionAmbient:
       maps x to p_0
       maps y to p_1
       - substitution:
       maps p_0 to p_0
       maps p_1 to p_1
       maps p_2 to p_1
       maps p_3 to -p_0^2+p_0*p_1
       maps p_4 to p_0^2*p_1
       - fullSubstitution:
       maps p_0 to x
       maps p_1 to y
       maps p_2 to y
       maps p_3 to -x^2+x*y
       maps p_4 to x^2*y
   SeeAlso
       subring
       PresRing
       (gens, Subring)
       (ambient, Subring)
       sagbi
///

doc ///
   Key
     autoreduce
     (autoreduce, Subring, Matrix)
   Headline
     Perform autoreduction of the generators of an ideal of a subring.
   Inputs
     subR:Subring
       A subring instance that is a sagbi basis.
     idealGens:Matrix
       A one-row matrix whose entries are the elements of subR considered as generators of an ideal $I$. 
   Usage
     result = autoreduce(subR, idealGens)
   Outputs
     result:Matrix
       The reduced generators of the ideal generated by the entries of M.
   Description
     Text
       Performs autoreduction on the generators of an ideal within a subring.
       
       Each generator $g\in M$ is replaced with the normal form of $g$ relative to $M\setminus \{g\}$, computed using
       the function @TO "intrinsicReduce"@.

   SeeAlso
        autosubduce
///
doc ///
   Key
     subduction
     (subduction, Matrix, RingElement)
     (subduction, Matrix, Matrix)
     (symbol %, Matrix, Subring)
   Headline
     Performs subduction relative to the generators of a subring.
   Inputs
     subR:Subring
     f:RingElement
         An element of the tensor ring or ambient ring of f.
     M:Matrix
     	 A one-row matrix containing elements of the tensor ring or ambient ring of f.
     subGens:Matrix
     	 A one-row matrix containing elements of the tensor ring or ambient ring of f.
   Outputs
     result:RingElement
       An element of the tensor ring of subR
     resultMat:Matrix
   Usage 
     result = subduction(subR, f)
     resultMat = subduction(subR, M)
     resultMat = M % subR
   Description
     Text
       If the second argument is a one-row matrix, subduction is performed on each entry 
       individually and the resulting one-row matrix is returned. If the second argument is
       a ring element @TT "f"@, subduction is performed on @TT "f"@ and the result is returned.

       The subring @TT "subR"@ is not required to be a Sagbi basis. The reasoning behind this is
       because it is not neccessary for the set of subring generators to be a Sagbi basis in order
       for the subduction algorithm to be well-defined.
            
     Example
       gndR = QQ[symbol t_1, symbol t_2, symbol t_3];
       G = matrix {{t_1^4*t_2^4*t_3^4, (t_1^8)*t_2*t_3^8}}
       subduction(G, G_(0,0))
       subduction(G, G_(0,0)*G_(0,1) + t_1)
       f = subduction(G, t_1)
///

doc ///
   Key
     autosubduce
     (autosubduce, Matrix)
   Headline
     Performs autosubduction on the generators of a subring.
   Usage
     result = internalSubduction(pres)
   Inputs
     subR:Subring
    	A subring that need not be a sagbi basis. 
   Outputs
     result:Subring
       A subring generated by the autosubduced generators of subR.
   Description
     Text
       Replaces each generator $g$ of @TT "subR"@ with the result of subducing $g$ modulo (gens subR)$\setminus \{g\}$.
       
   SeeAlso
     autoreduce
     (internalSubduction, PresRing, RingElement)
///

doc ///
   Key
     isSubalg
     (isSubalg, Subring, Subring)
   Headline
     Calculates whether a given subring is contained in another subring.
   Usage
     result = intrinsicReduce(A, B)
   Inputs
     A:Subring
     B:Subring
   Outputs
     result:Boolean
    	Whether or not the subring A is contained in the subring B. 
   Description
     Text
       This function tests that each of the generators of the subring A have a normal form of zero with respect to B.
     Example
       R = QQ[t_1, t_2]
       A = subring matrix(R, {{t_1^2, t_1*t_2}});
       B = subring matrix(R, {{t_1^2, t_1*t_2, t_2^2}});
       isSubalg(A,B)
///

doc ///
   Key
     makePresRing
     (makePresRing, Ring, Matrix)
     (makePresRing, Ring, List)
     (makePresRing, Subring)
     [makePresRing, VarBaseName]
   Headline
     Contstructs an instance of the PresRing type
   Usage
     result = makePresRing(gndR, gensMat)
     result = makePresRing(gndR, gensList)
   Inputs
     gndR:PolynomialRing
     	 The ambient ring. Contains the entries of @TT "gensMat"@ or @TT "gensList"@.
     gensList:List
     	 A list of elements of @TT "gndR"@.
     gensMat:Matrix
     	 A one-row matrix of elements of @TT "gndR"@.
     VarBaseName => String
        Determines the symbol used for the variables of the @TT "tensorRing"@ of the resulting @TO "Subring"@ instance.
   Outputs
     result:PresRing
   Description
     Text 
       There are very few situations where it is recommended to use this function directly, it is better to use the function @TT "subring"@ instead.
///


doc ///
   Key
     mingensSubring
     (mingensSubring, Subring, Matrix)
   Headline
     Given a matrix that is considered as a module over a subring, this performs autoreduction on its generators.
   Usage
     result = mingensSubring(subR, M)
   Inputs
     subR:Subring
     M:Matrix
   Outputs
     result:Thing
    	The autoreduced generators of the given module.
   Description
     Text 
       This function converts the matrix M to a subring ideal, performs autoreduction on the generating set of that ideal, 
       and then returns the result in the form of a matrix.
///

doc ///
   Key
     moduleToSubringIdeal
     (moduleToSubringIdeal, Subring, Matrix)
   Headline
     Convert a module stored as a matrix to a subring ideal.
   Usage
     result = mingensSubring(subR, M)
   Inputs
     subR:Subring
     	 A subring that is a sagbi basis.
     M:Matrix
     	 A matrix whose entries are containing are elements of subR. 
   Outputs
     moduleSubR:Subring
        A subring 
     result2:Matrix
     	A one-column matrix whose entries are the generators of the subring ideal.
     gVars:Matrix
     	A one-row matrix whose entries are the generators of the module.
   Description
     Text 
       This function is highly experimental.
   SeeAlso
     "Experimental feature: modules over subrings"
///

doc ///
   Key
     subalgEquals
     (symbol ==, Subring, Subring)
     (subalgEquals, Subring, Subring)
   Headline
     Check if two subring instances are mathematically equal.
   Usage
     result = subalgEquals(A,B)
     A == B
   Inputs
     A:Subring
     B:Subring
   Outputs
     result:Boolean
   Description
     Text 
       Tests subrings for mathematical equality.
       
       The ambient rings of the subrings @TT "A"@ and @TT "B"@ should be the same.
   SeeAlso
     isSubalg 
///

doc ///
   Key
     Autosubduce
   Headline
     Whether to autosubduce before performing the Sagbi algorithm
   Description
     Text 
       By default, the function @TO "sagbi"@ performs autosubduction on the generators of the given subring. Strictly speaking,
       this step is required in order to guarentee the correctness of the result in all cases. However, when the set of generators
       passed to @TO "sagbi"@ is large but it is expected that the subring they generate is not trivial, this option can be set to 
       @TT "false"@ in order to gain a performance advantage.     
   SeeAlso
     sagbi
     Autosubduce
     Limit
     PrintLevel 
///

doc ///
   Key
     PrintLevel
   Headline
     A verbose mode for the Sagbi algorithm.
   Description
     Text 
       There are three different levels supported for this option:
       
       @UL{
	   "0: default, print nothing.",
	   "1: Print information about the progress of the computation, but do not print any polynomials.",
	   "2: Print all information about the progress of the computaiton, including polynomials."
	   }@
   SeeAlso
     sagbi
     Autosubduce
     Limit
     PrintLevel 
///

doc ///
   Key
     toricSyz
     (toricSyz, Subring, Matrix)
   Headline
     Calculate toric (monomial) syzygies of a set of monomials in the initial algebra.
   Inputs
     subR:Subring
         Generators are assumed to be a (complete) SAGBI basis.
     M:Matrix
     	 A 1 x r matrix of monomials in the initial algebra of subR.
   Outputs
     result:Matrix
         The syzygies of M in the rank-r free module over the initial algebra.
   Usage 
     result = toricSyz(subR, M)
   Description
     Text
       This is an experimental implementation of algorithm 11.18 in Sturmfels' "Gröbner bases and Convex Polytopes."
     Example 
       R = QQ[t_1,t_2];
       A = subring sagbi{t_1^2,t_1*t_2,t_2^2};
       M = matrix{{t_1^2, t_1*t_2}};
       toricSyz(A, M)
     Text
       See @TO "Experimental feature: modules over subrings"@ for another example.
///

doc ///
   Key
     intrinsicReduce
     (intrinsicReduce, Subring, Matrix, RingElement)
     (intrinsicReduce, Subring, Matrix, Matrix)
   Headline
     Compute normal forms relative to an ideal within a subring that has a known Sagbi basis.
   Inputs
     subR:Subring
         A subring that is a Sagbi basis and contains the ideal generated by the 1-row matrix G.
     G:Matrix
     	 A one-row matrix that generates an ideal of subR.
     p:RingElement
     	 An element of the tensor ring of subR.
     M:Matrix
     	 A one-row matrix containing elements of the tensor ring of subR.
   Outputs
     result:RingElement
     resultMat:Matrix
   Usage 
     result = toricSyz(subR, M, p)
     resultMat = toricSyz(subR, G, M)
   Description
     Text
       This is an implementation of algorithm 11.14 of the following text:
       
       B. Sturmfels, Groebner bases and Convex Polytopes, Univ. Lecture Series 8, Amer Math Soc, Providence, 1996

       This is not fully tested and should be considered "experimental" or "educational."

   SeeAlso
     extrinsicBuchberger
///

doc ///
   Key
     extrinsicBuchberger
     (extrinsicBuchberger, Subring, Matrix)
   Headline
     Computes a Gröbner basis of an ideal within a @TO "Subring"@.
   Usage
     extrinsicBuchberger(M, gVars)
   Inputs
     M:Matrix
    	A 1-column matrix that is often the result of a call to moduleToSubringIdeal.
     gVars:Matrix 
        A 1-row matrix containing the variables that correspond to the generators of the module.
   Outputs
     result:Matrix
        
   Description
     Text
       This is an implementation of Algorithm 11.24 of "Gröbner Bases and Convex Polytopes" by Bernd Sturmfels.  This function works similar to the function @TO (groebnerBasis,Matrix)@, except that the "field of scalars" is a subring.
///

doc ///
   Key
     (symbol ^, Subring, ZZ)
   Headline
     Construct a product subring.
   Inputs
     subR:Subring
         the subring used to construct a product.
     n:ZZ
     	 the number of copies of the subring.
   Outputs
     result:Subring
   Usage 
     result = subR^n
   Description
     Text
       The resulting subring has  @TT "n"@ distinguished variables that correspond to module generators.
       
   SeeAlso
    "Experimental feature: modules over subrings"
///




doc ///
   Key
     (ambient, Subring)
   Headline
     Returns the ambient ring (ring containing the generators) of a subring.
   Inputs
     subR:Subring
   Outputs
     amb:PolynomialRing
       the ambient ring.
   Usage 
     amb = ambient subR 
   Description
     Example
       gndR = QQ[x,y,z];
       subR = subring({x^2, y^2, z^2});
       ambient subR
   SeeAlso
     (ring, Subring)
     (gens, Subring)
///

doc ///
   Key
     (gens, Subring)
   Headline
     Returns the generators of a subring as a one-row matrix.
   Inputs
     subR:Subring
       Any Subring instance. 
   Outputs
     M:Matrix
       A one-row matrix containing the generators of subR.
   Usage 
     M = gens subR
   Description
     Example
       gndR = QQ[x,y,z];
       subR = subring({x^2, y^2, z^2});
       gens subR
   SeeAlso
     (ambient, Subring)
     (ring, Subring)
///
doc ///
   Key
     (numgens, Subring)
   Headline
     Returns the number of generators of a subring.
   Inputs
     subR:Subring
       Any Subring instance. 
   Outputs
     n:ZZ
       The number of generators of subR.
   Usage 
     n = numgens subR
   Description
     Example
       gndR = QQ[x,y,z];
       subR = subring({x^2, y^2, z^2});
       numgens subR
   SeeAlso
     (gens, Subring)
     (ambient, Subring)
     (ring, Subring)
///

doc ///
   Key
     debugPrintAllMaps
     (debugPrintAllMaps, Subring)
   Headline
     Prints the maps associated with a subring.
   Usage
     debugPrintAllMaps(subR)
   Inputs
     subR:Subring
    	any subring.
   Outputs
   Description
     Text
       Prints a summary of the maps associated with a Subring instance. 
       
       It is easy to get confused about what the various maps and rings stored inside of a @TO "Subring"@ instance are. 
              
       Although not strictly neccessary, this function makes this package easier to learn and debug.       
     Example 
       R = QQ[t_1, t_2];
       subR = subring matrix(R, {{t_1^2, t_1*t_2, t_2^2}});
       debugPrintAllMaps(subR)
   SeeAlso
     (debugPrintAllMaps, Subring)
     (debugPrintGens, Subring)
     (debugPrintMap, RingMap)
     (debugPrintMat, Matrix)
///

doc ///
   Key
     debugPrintGens
     StrWidth
     (debugPrintGens, Subring)
     [debugPrintGens, StrWidth]
   Headline
     Prints the generators of a subring.
   Usage
     debugPrintGens(subR)
   Inputs
     subR:Subring
       any subring.
     StrWidth=>ZZ
       The maximum width (in characters) to print.

   Outputs
   Description
     Text
       Prints the generators of a subring in a human readable-format.
       
       The optional argument @TO "StrWidth"@ determines the maximum number of characters to print in a single line.
       Polynomials whose net representation is wider than @TO "StrWidth"@ characters are cut off.
              
     Example 
       R = QQ[t_1, t_2];
       subR = subring matrix(R, {{t_1^2, t_1*t_2, t_2^2}});
       debugPrintGens(subR)
   SeeAlso
     (debugPrintAllMaps, Subring)
     (debugPrintGens, Subring)
     (debugPrintMap, RingMap)
     (debugPrintMat, Matrix)
///

doc ///
   Key
     debugPrintMap
     (debugPrintMap, RingMap)
   Headline
     Prints a RingMap in human-readable format.
   Usage
     debugPrintGens(f)
   Inputs
     f:RingMap
    	any RingMap.
   Outputs
   Description
     Text
       Prints a single RingMap in a human-readable format.
     Example 
       R = QQ[t_1, t_2];
       subR = subring matrix(R, {{t_1^2, t_1*t_2, t_2^2}});
       debugPrintMap(subR#"presentation"#"substitution")
   SeeAlso
     (debugPrintAllMaps, Subring)
     (debugPrintGens, Subring)
     (debugPrintMap, RingMap)
     (debugPrintMat, Matrix)
///

doc ///
   Key
     debugPrintMat
     (debugPrintMat, Matrix)
     [debugPrintMat, StrWidth]
   Headline
     Prints a one-row matrix of in human-readable format.
   Usage
     debugPrintMat(M)
   Inputs
     M:Matrix
       A one row-matrix.
     StrWidth=>ZZ
       The maximum width (in characters) to print.
   Outputs
   Description
     Text
       Given a one row matrix of (potentially very large) polynomials, prints each entry in human-readable format.
       
       The optional argument @TO "StrWidth"@ determines the maximum number of characters to print in a single line.
       Polynomials whose net representation is wider than @TO "StrWidth"@ characters are cut off.

     Example 
       R = QQ[t_1, t_2];
       debugPrintMat(matrix {{t_1^2, t_1*t_2, t_2^2}})
   SeeAlso
     (debugPrintAllMaps, Subring)
     (debugPrintGens, Subring)
     (debugPrintMap, RingMap)
     (debugPrintMat, Matrix)
///

doc ///
   Key
     extractEntries
     (extractEntries, Matrix, Matrix)
   Headline
     Can be thought of as the inverse of moduleToSubringIdeal
   Usage
     extractEntries(M, gVars)
   Inputs
     M:Matrix
    	A 1-column matrix that is probably the result of a call to moduleToSubringIdeal.
     gVars:Matrix 
        A 1-row matrix containing the variables that correspond to the generators of the module.
   Outputs
     result:Matrix
        
   Description
     Text
         
       Converts elements of a subring ideal (represented by a one-column matrix) to elements 
       of a module (represented by a matrix.)

       Internally, the argument gVars is sorted so that the order of the columns of the resulting
       matrix is consistent.
       
     Example 
       R = QQ[a, b, c, x_1, x_2, x_3];
       extractEntries(matrix {{a*x_1 + b*x_2 + c*x_3}}, matrix {{x_1, x_2, x_3}})
       extractEntries(matrix {{a*x_1 + b*x_2 + c*x_3},{a*x_1 + a*x_2 + a*x_3}}, matrix {{x_1, x_2, x_3}} )
   SeeAlso
     (moduleToSubringIdeal, Subring, Matrix)
///

doc ///
   Key
     subring
     (subring, List)
     (subring, Matrix)
     (subring, SAGBIBasis)
     [subring, VarBaseName]
   Headline
     Constructs a subring of a polynomial ring.
   Usage
     A = subring M
     A = subring L
     A = subring S
   Inputs
     M:Matrix
       a one-row matrix whose entries are the generators for the constructed @TO "Subring"@.
     L:List 
       a list of generators for the constructed @TO "Subring"@.
     S:SAGBIBasis
     VarBaseName=>String
       determines the symbol used for the variables of the @TT "tensorRing"@ for the constructed @TO "Subring"@.
   Outputs
     A:Subring
   Description
     Text
       This function serves as the canonical constructor for the @TO "Subring"@ type.

       Generators that are constants are ignored because all subrings are assumed to contain the field of coefficients. An error is 
       thrown if the given set of generators does not contain at least one non-constant generator.  The generators of a subring need not be reduced.
     Example
       gndR = QQ[x];
       A = subring {x^4+x^3, x^2+x}
       subring sagbi A
       (x^3+x^2)%A

   SeeAlso
     Subring
///

doc ///
   Key
     sagbiBasis
     (sagbiBasis,Subring)
     (sagbiBasis,MutableHashTable)
     [sagbiBasis,storePending]
     [sagbiBasis,VarBaseName]
   Headline
     Constructs a computation object from a subring.
   Usage
     B = sagbiBasis S
   Inputs
     S:Subring
     storePending => Boolean
        determines if the pending list (which may be large) is stored internally at the end of a computation.
     VarBaseName => String
        name to be used internally for variables in the tensor ring.
   Outputs
     B:SAGBIBasis
   Description
     Text
       This function serves as the canonical constructor for the @TO "SAGBIBasis"@ type.  It is also the output of the @TO "sagbi"@ function.
   SeeAlso
     SAGBIBasis
///

doc ///
   Key
     (symbol //, RingElement, Subring)
     (symbol //, Matrix, Subring)
   Headline
     Attempt to write a ring element in terms of the generators of a subring.
   Usage 
     result = f//subR
   Inputs
     f:RingElement
       An element 
     subR:Subring
       A subring that is a Sagbi basis. 
   Outputs
     result:RingElement
   Description
     Text 
       Internally, this function calculates a Groebner basis. The first call will take longer to perform than subsequence calls
       because this Groebner basis is stored in the cache of @TT "subR"@ after it is found. Another implication of this is that
       it may take a very long time to compute for difficult subrings.   
       
       Doubts have been expressed about the theoretical basis of this function.
     Example
       gndR = QQ[x];
       A = subring sagbi subring {x^4+x^3, x^2+x}
       gens A
       f = x^3 + x^2
       g = f//A
       (A#"presentation"#"fullSubstitution")(g) == f
///

doc ///
   Key
     isSagbi
     (isSagbi,Subring)
     (isSagbi,Matrix)
     (isSagbi,List)
   Headline
     test if the generators form sagbi basis
   Usage
     result = isSagbi subR
   Inputs
     subR:Subring
   Outputs
     result:Boolean
       true or false, depending on whether or not the generators are a SAGBI basis with respect to the term order.
   Description
     Example
       R = QQ[x,y,z];
       L = {y*(x-1), y*x^2, y*(x^3+x^2+x+1), y^2};
       isSagbi L
       M = {x+y+z,x*y+x*z+y*z, x*y*z, (x-y)*(x-z)*(y-z)};
       isSagbi M
       N = {x+y+z,x*y+x*z+y*z, x*y*z};
       isSagbi N
///
      
doc ///
   Key
     genVars
     (genVars,Subring)
   Headline
     tensor ring generators
   Usage
     result = genVars(subR)
   Inputs
     subR:Subring
   Outputs
     result:Matrix
   Description
     Text
        Returns the variables corresponding to the subalgebra generators in the tensor ring (which is part of the presentation) of a subring.
///

doc ///
   Key
     internalSubduction
     (internalSubduction,PresRing,Matrix)
     (internalSubduction,PresRing,RingElement)
   Headline
     performs subduction from a presentation ring
   Usage
     result = internalSubduction(presR,relem)
     result = internalSubduction(presR,M)
   Inputs
     presR:PresRing
     relem:RingElement
     M:Matrix
        A matrix of ring elements to be subducted
   Outputs
     result:Matrix
   Description
     Text
        Performs subduction of the @TO "RingElement"@ or the entries of the @TO "Matrix"@ against the content of the @TO "PresRing"@.  This is typically an internal call and @TO "subduction"@, @TO "autosubduce"@, @TO "autoreduce"@ should be used instead.
   SeeAlso
     subduction
     autosubduce
     autoreduce
///

doc ///
   Key
     sagbiDone
     (sagbiDone,SAGBIBasis)
   Headline
     Test if sagbi basis computation is complete
   Usage
     result = sagbiDone(S)
   Inputs
     S:SAGBIBasis
   Outputs
     result:Matrix
   Description
     Text
        Returns true if the sagbi basis computation has been completed.
///

doc ///
   Key
     (ring,Subring)
   Headline
     Returns tensor ring
   Usage
     result = ring subR
   Inputs
     subR:Subring
   Outputs
     result:Ring
   Description
     Text
        Returns the tensor ring of the subring (which is part of the presentation of the subring)
///

doc ///
   Key
     (gens,SAGBIBasis)
   Headline
     Returns a partial sagbi generating set
   Usage
     result = gens S
   Inputs
     S:SAGBIBasis
   Outputs
     result:Matrix
   Description
     Text
        If there are no sagbi generators, returns the generators of the original subring.  If the sagbi computation has completed with a finite sagbi basis, returns the sagbi basis.  In any other case, subducts the generators of the original subring by the partial sagbi basis and returns both the partial sagbi basis and the result of the subduction.
///
